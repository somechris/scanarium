#-------------------------------------------------------------------------------
# General configuration
#-------------------------------------------------------------------------------
[general]


debug = False



#-------------------------------------------------------------------------------
# General configuration
#-------------------------------------------------------------------------------
[debug]
# When `debug` is True, scanned images get shown on the screen as they get
# processed. If this is in the way, as you are debugging backend services, you
# can keep `debug` at `True` and set this value to `True` as well to get all the
# debug features but not be bothered with the images
hide_images = False


# Whether to hide source image with marked features during debugging
hide_image_source_with_detected_features = False


# Whether to hide source image without marked features during debugging
hide_image_source = False


# Whether to hide the raw image during debugging
hide_image_raw_image = False


# Whether to hide the undistorted image during debugging
hide_image_undistorted_image = False


# Whether to hide the image scaled for preparation during debugging
hide_image_scaled_image_preparation = False


# Whether to hide the raw scaled image during debugging
hide_image_scaled_image_raw = False


# Whether to hide the final scaled image during debugging
hide_image_scaled_image_final = False


# Whether to hide the image used for feature detection during debugging
hide_image_prepared_for_detection_contrast_1_0 = True


# Whether to hide the image with found contours during debugging
hide_image_contours = False


# Whether to hide the rectified image during debugging
hide_image_rectified_image = False


# Whether to hide the aspect ration fixed image during debugging
hide_image_aspect_ratio_fixed_image = False


# Whether to hide the final image during debugging
hide_image_final = False


# Whether to hide the cut out image with 0.6 blendend stencil during debugging
hide_image_masked_0_6 = False


# Whether to hide the cut out image with 0.01 blendend stencil during debugging
hide_image_masked_0_01 = False


# If true, and the first argument of the invocation is
# `--debug-config-override` followed by a file name, then this file is
# read and can ovveride config settings. This is mostly useful for
# testing.
enable_debug_config_override_command_line_argument = False


# Whether to have fine grained or more general error messages.
#
# If True, provide fine grained error messages. These are typically not too
# useful for end-users, but help a lot during debugging. For example when trying
# to hunt down where exactly scanning goes wrong.
fine_grained_errors = False




#-------------------------------------------------------------------------------
# Logging configuration for workflow
#-------------------------------------------------------------------------------
[log]


# If `True`, CGI results get logged to the log directory.
cgi_results = False


# If `True`, raw images get logged to the log directory.
raw_image_files = False




#-------------------------------------------------------------------------------
# Configuration for where to find which binary
#-------------------------------------------------------------------------------
[programs]


# The binary to start Inkscape
inkscape = inkscape


# The binary to start ExifTool
exiftool = exiftool



# The binary for ImageMagick's convert
convert = convert



# The binary for ImageMagick's convert used for untrusted files (E.g.: To
# convert uploaded PDFs to JPGs)
convert_untrusted = convert



# The binary to convert PDFs to JPGs for pipeline pdftoppm
pdftoppm_untrusted = pdftoppm



# The binary for Poppler's pdfunite
pdfunite = pdfunite



#-------------------------------------------------------------------------------
# Configuration for directories
#-------------------------------------------------------------------------------
[directories]


# Directory for user generated content, relative to the Scanarium repo
# root directory.
dynamic = dynamic


# Directory for user logged content (feedback, images, ...), relative
# to the Scanarium repo root directory.
log = log



#-------------------------------------------------------------------------------
# Configuration for image scanning
#-------------------------------------------------------------------------------
[scan]


# Source to get images from.
#
# `cam:<n>` denotes video camera `<n>`. On linux, this resolves to
# `/dev/video<n>`. So for example, `cam:2` would be `/dev/video2`.
# `image:<file_name>` denotes the still image file `<file_name>`. This allows
# to test on systems without cameras, or inject images that arrived through
# other means (E.g.: emails)
# Strings that do not start with `cam:` or `image:` are considered raw specs to
# OpenCV's VideoCapture contstructor.
source = cam:0


# The duration below which image grabs are considered stale.
#
# For scanarium, we always want to use the image that the camera is currently
# seeing. Some camera pipelines (E.g.: GStreamer pipelines) may buffer images.
# This means that if we only scan once in a while (E.g.: When only doing manual
# scans from the Web UI, OpenCV would give the next image, which might come
# from a buffer and might have been taken immediately after the previous scan.
# So it might be several minutes old). We want to skip past such old images and
# instead want to only use fresh images. As we cannot rely on cameras giving
# proper timestamps, we instead skip on the time it took to get the image, as
# buffered images typically get `grab`-bed much quicker than fresh images.
# Images that OpenCV `grab`s quicker than `minimum_grab_time` (in seconds) are
# considered old, stable images from the buffer, while images that take at
# least `minimum_grab_time` are considered fresh images. Leaving at the
# default of 0 considers every image a fresh image. Note that this value
# should be lower than `1 / frames-per-second-of-your-camera`. Otherwise,
# you'll consider most images stale.
# For example for a 21fps camera, 0.018 gives very reliable results on a board
# that is quick enough to convert the full stream.
minimum_grab_time = 0


# Where to store raw images for debugging
#
# If not empty, it is the directory raw images get stored in for later
# debugging. This is useful to debug issues if the camera stops after some
# time without log messages. (See `raw_image_period` to specify how often an
# image is stored)
#
# If empty, raw images are not stored to disk.
#
raw_image_directory = 


# How often raw images get stored
#
# This parameter is unused, if `raw_image_directory` is empty.
#
# Otherwise, it denotes the minimal period in seconds that has to pass after
# the previous raw image store before the next raw image gets stored. Use
# `0` to store each and every image.
#
raw_image_period = 60


# Parameters for camera calibration
#
# Typical camera pictures are distorted a bit and for examlpe do not preserve
# angles. This is in the way of best detection results. To improve detection
# quality, you can calibrate your camera. Scanarium can then use this
# calibration data and make up for part of the camera distortion, which leads to
# better image detection.
#
# Either leave this value empty to perform no distortion, or set it to the
# name of an XML file holding camera calibration data from OpenCV's
# interactive camera calibration tool. See
# https://docs.opencv.org/3.2.0/d7/d21/tutorial_interactive_calibration.html
calibration_xml_file =


# Contrast adjustments for contour detection
#
# This is a comma separated list of contrast factors to try for
# contour detection. First entry that allows to find a suitable
# rectangle wins. The factor is multiplied to all pixel values. So a
# contrast factor 1 means no contrast change.
contrasts = 1


# Image of maximum achievable brightness
#
# If empty, no brightness correction for badly lit corners gets applied before
# contour detection.
#
# If not empty, it should point to an image that exposes the maximum achievable
# brightness for each pixel (E.g.: Cover the scanned area with white paper and
# run `./show-source.sh --store-final` and set this parameter to the stored
# file). This image gets used to clip and stretch brightness for each pixel
# before contour detection to equalize strongly and weakly lit areas of the
# scanned image.
#
# This image has to match the resolution of the camera with applied
# `calibration_xml_file`.
max_brightness = 


# Size of the window for blurring before Canny Edge Detector
#
# If your camera suffers from noise, blurring before detecting edges will give
# better detection results (and typically overall speed up things for us as
# the cost of blurring is compensated by having to comb through fewer bogus
# edges).
#
# The value to use depends on the used camera. But you can use 3 as general
# purpose starting point.
#
# 0 disables blurring.
canny_blur_size = 3


# First threshold for Canny Edge Detector
#
# This value gets used as `threshold1` in OpenCV's `Canny` implementation of
# the Canny Edge Detector. See
# https://docs.opencv.org/master/dd/d1a/group__imgproc__feature.html#ga04723e007ed888ddf11d9ba04e2232de
canny_threshold_1 = 30


# Second threshold for Canny Edge Detector
#
# This value gets used as `threshold2` in OpenCV's `Canny` implementation of
# the Canny Edge Detector. See
# https://docs.opencv.org/master/dd/d1a/group__imgproc__feature.html#ga04723e007ed888ddf11d9ba04e2232de
canny_threshold_2 = 400


# The white-balance filter to apply.
#
# Either `simple`, `grayworld`, or `none`.
# Since white-balance filters in some setups (E.g.: too little light) often
# distort colors of images, we do not perform white-balancing per default.
# More information about `simple` white-balancing is available at
# https://github.com/opencv/opencv_contrib/blob/master/modules/xphoto/src/simple_color_balance.cpp
# More information about `grapworld` white-balancing is available at
# https://github.com/opencv/opencv_contrib/blob/master/modules/xphoto/src/grayworld_white_balance.cpp
white_balance = none


# Whether to shrink the buffer sizes
#
# We only care about the most recent image. Buffering images makes us skip
# through the buffered images until we reach the newest one. So we generally
# want minimal buffers. However, minimizing causes some image pipelines to
# re-initialize, which may throw cameras off. So we default to `False`
# (which is save). Setting to `True` will minimize buffers.
minimize_buffers = False


# Search window size for refinement of found corners
#
# Corner refinement costs some time, but helps to improve accuracy of found
# corner points, which is useful for spot-on matching of drawings to templates.
#
# We use this setting to improve the found inner corners of the rectangle on
# actor drawings. Don't set a too high value, because if both the inner and
# outer corner are in the search window, the refinement will gravitate towards
# the outer corner instead of the inner corner.
#
# A setting of 3 should be good enough for standard web-cams.
#
# 0 disables sub-pixel corner detection
corner_refinement_size = 0


# Iteration bound for corner refinement
#
# If corner refinement is enabled (see `corner_refinement_size`), abort the
# refinement algorithm after at most as many iterations as given by this bound.
corner_refinement_iteration_bound = 20


# Bound on accuracy of corner refinement
#
# If corner refinement is enabled (see `corner_refinement_size`), abort the
# refinement algorithm if the change in accuracy drops below this bound.
corner_refinement_accuracy = 0.03


# Width of camera source
#
# If non-empty, force camera sources to the given width (in pixels)
# width. This is useful to force cameras to a given resolution, if
# they default to a non-optimal one.
width =


# Height of camera source
#
# If non-empty, force camera sources to the given height (in pixels)
# height. This is useful to force cameras to a given resolution, if
# they default to a non-optimal one.
height =


# Minimum width of image
#
# If the image is smaller (or gets smaller during re-alignments for
# QR-code extracting) than this width, the image is rejected.
min_raw_width_trip = 150

# Maximum width of raw camera source
#
# Proportionally rescale raw camera images to at most this width, if
# the raw camera image is wider than `max_raw_width_trip`.
#
# If empty, raw camera image width does not trigger rescaling
max_raw_width =


# Maximum height of raw camera source
#
# Proportionally rescale raw camera images to at most this height, if
# the raw camera image is higher than `max_raw_height_trip`.
#
# If empty, raw camera image height does not trigger rescaling
max_raw_height =


# Trip point of raw camera source width to trigger rescaling
#
# If the raw camera source image is wider than this setting, the image gets
# proportionally rescaled `max_raw_width`.
#
# If empty, defaults to `max_raw_width`
max_raw_width_trip =


# Trip point of raw camera source height to trigger rescaling
#
# If the raw camera source image is heigher than this setting, the image gets
# proportionally rescaled `max_raw_height`.
#
# If empty, defaults to `max_raw_height`
max_raw_height_trip =


# Maximum width of final image
#
# Proportionally rescale the final image to at most this width, if it is wider than
# `max_final_width_trip`.
#
# If empty, the final image width does not trigger rescaling
max_final_width =


# Maximum height of final image
#
# Proportionally rescale the final image to at most this height, if it is higher
# than `max_final_height_trip`.
#
# If empty, the final image does not trigger rescaling
max_final_height =


# Trip point of the final image width to trigger rescaling
#
# If the final image is wider than this setting, the image gets proportionally
# rescaled `max_final_width`.
#
# If empty, defaults to `max_final_width`
max_final_width_trip =


# Trip point of the final image height to trigger rescaling
#
# If the final image is heigher than this setting, the image gets proportionally
# rescaled `max_final_height`.
#
# If empty, defaults to `max_final_height`
max_final_height_trip =


# Delay for frame grabbing from cameras
#
# Some cameras take some time after initialization to complete
# auto-white-balancing etc. So images grabbed early after
# initialization might be off-colour. By waiting some time, say 1
# second, such cameras allow to get way better images. The `delay`
# setting allows how specify long to wait (in seconds) before grabbing
# the frame from cameras. Leave empty for no waiting.
delay =


# Permit loading JPG files
#
# JPG is supported directly by OpenCV and can be used without manual
# conversion. It is enabled by default and probably used by most
# users.
#
# Note that disabling JPG files only affects scanning of images.
# JPG scene backgrounds etc. are still loaded, even if this setting is
# False.
permit_file_type_jpg = True


# The pipeline to load pngs for scanning
#
# Use `native` (the default) to load them without conversion directly
# through OpenCV.
#
# Use `convert` to pass them through ImageMagick before loading.
pipeline_file_type_jpg = native


# Permit loading PNG files
#
# PNG is supported directly by OpenCV and can be used without manual
# conversion. It is enabled by default and probably used by most
# users.
#
# Note that disabling PNG files only affects scanning of images.
# PNG scene backgrounds etc. are still loaded, even if this setting is
# False.
permit_file_type_png = True


# The pipeline to load pngs for scanning
#
# Use `native` (the default) to load them without conversion directly
# through OpenCV.
#
# Use `convert` to pass them through ImageMagick before loading.
pipeline_file_type_png = native


# Permit conversion from PDF
#
# OpenCV cannot read PDFs on it's own, so they need to be converted before
# scanning them. As PDF is a complex format, it is a potential security issue to
# accept PDFs from unknown sources and we deny them per default. If you however
# can either trust the PDFs or you can run a hardened version of `convert`, set
# this value to `True` to accept them for scanning and automatically convert
# them upon need.
permit_file_type_pdf = False


# The pipeline to convert PDFs to images
#
# This stetting selects the pipeline to convert PDFs to images and is only used
# if `permit_file_type_pdf` is True.
#
# Use `convert` (this is the default) to convert PDFs using ImageMagick's
# `convert`. As Scanarium relies on ImageMagick anyways, it allow to convert
# PDFs to images without additional software. The downside is that ImageMagick's
# `convert` is slow.
#
# Use `pdftoppm` to convert PDFs using the `pdftoppm` program from
# `poppler-utils`. `pdftoppm` shaves off about 70% runtime compared to the
# `convert` pipeline. But if you choose `pdftoppm`, you have to install
# `poppler-utils` (or whatever package provides `pdftoppm` on your
# distribution).
pipeline_file_type_pdf = convert


# Permit conversion from HEIC
#
# OpenCV cannot read HEICs on it's own. Yet it's what recent Apple phones use as
# default format. So we want to be able to support it. As it depends on the
# (not-yet everywhere available) HEIC support in ImageMagick, we allow prohibit
# uploading per default, but allow to permit it.
permit_file_type_heic = False



#-------------------------------------------------------------------------------
# Configuration for image masks
#-------------------------------------------------------------------------------
[mask]


# Value to add to stroke-width of Mask layer's elements, when generating masks
#
# Increasing this value cuts off from the outside of the image. This helps with
# slightly misaligned images and allows to avoid having parts from outside of
# the actor template in the final image. But since it cuts off more, it also
# means that it cuts off more from the actual drawing.
#
# If you manage to get spot ot scans each time, set this value to 0. Otherwise
# slowly increase it.
stroke_offset = 0


# Color for strokes, when generating masks
#
# If an element of the mask layer has set a stroke color, you can override it
# with this setting when generating masks.
#
# Using this setting, you can have the actor outlines in a nice light grey and
# still get clear masking by setting `#000000` here.
#
# If empty, the stroke color is not overridden.
#
# Note, that this setting only overrides existing stroke color settings. It
# does nothing for elements that do not set a stroke color.
stroke_color =


#-------------------------------------------------------------------------------
# Configuaration for each CGI script
#-------------------------------------------------------------------------------
[cgi]
# If not empty, use this value a DISPLAY environment variable when calling
# scripts as cgi through the webserver.  This is useful when doing remote
# debugging on a proper webserver and you want to enforce showing on a given
# display.
display =

[cgi:scan]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:scan-data]
# Whether or not to allow calling the script as cgi through the webserver.
# This endpoint is use for a proof of concept. It will likely change
# or go a way. Do not rely on it.
allow = False

[cgi:show-source]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:update-password]
# Whether or not to allow updating passwords
allow = False

# The script to call to update the password. It gets called with pod, user,
# current password, and new password on separate lines in stdin. If it
# returns 0, it's considered ok. Otherwise, it's considered failed.
delegate =

[cgi:regenerate-static-content]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

# Whether or not to generate PNG variants for the actor/command pages.
generate_png = False

# Whether or not to generate JPG variants for the actor/command pages.
generate_jpg = False

# Whether or not to set metadata on the generated files.
#
# If `True`, the below attribution, license, etc will get set for generated
# files. Note that Scanarium's shipped images come under CC-BY-SA and AGPL, so
# when embedding metadata and distributing files, make sure to respect that
# license, or drop Scanarium's shipped images beforehand.
embed_metadata = False

# The name to use for attribution of generated files
attribution_name = n/a

# The URL to use for attribution of generated files
attribution_url = n/a

# The URL to refer to for licensing details
rights_url = n/a

# The name of the license to use for generated files
license_name = Creative Commons Attribution-ShareAlike 4.0 International

# The URL for the license of the generated files
license_url = https://creativecommons.org/licenses/by-sa/4.0/

# The year to use for Copyright lines
copyright_year = 2020


[cgi:reindex]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:reset-dynamic-content]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:report-feedback]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

# The target where to report the feedback to
#
# Possible values are:
# stderr - dump to stderr
# log - log into the log directory
target = stderr

[cgi:dump-dynamic-config]
# Whether or not to allow calling the script as cgi through the webserver.
# If you cannot control the webserver caching headers to disable caching of
# dynamic content, this script can help you to bypass caching.
# To switch clients to dump-dynamic-config, see `dynamicConfigMethod` in
# `frontend/javascript/config.js`
allow = False



#-------------------------------------------------------------------------------
# Configuaration for services
#-------------------------------------------------------------------------------



[service:continuous-scanning]

# Duration after which to exit if camera fails to produce images
#
# If the camera fails to produce after this many seconds, quit the service.
# This is useful on camera pipelines that cannot gracefully recover from
# failure on their own, but need to be fixed from the outside. Note that the
# service does not automatically get restarted after bailout. You need to use
# external measures (E.g.: systemd) to automatically restart it.
#
# 0 means no bailout, regardless how long the camera fails.
bailout_period = 0


# How to bail out
#
# Use `exit` to bail out by simply ending the program.
# Use `restart-service:FOO` to bail out by restarting service `FOO`. Note that
# restarting service `FOO` does not on it's own exit the continuous-scanning
# program.
#
# To trigger more than a single action, separate actions with `,`. So bailing
# out with mode `FOO,BAR` would first trigger bailing out `FOO` and upon
# success `BAR`.
bailout_mode = exit


# How long to wait after a bailout before allowing to trigger a new bailout
#
# This is useful for bailout modes that use a different mode than exiting the
# program, e.g.: Restarting a service. When such a bailout got triggered, the
# camera pipeline will typically take some time until it's fully operational
# again. During that recovery time, we want to pause bailout triggering, as
# we'd otherwise again and again re-trigger before the camera pipeline would
# become working again.
bailout_pause_period = 10


# How long to wait after startup before allowing to trigger a new bailout
#
# This is useful to avoid early triggering if the camera initially takes some
# time to come up.
bailout_initial_pause_period = 0


# How long to pause after processing an image before grabbing the next
#
# This setting is useful to lessen the load of this service. But do not make
# it too long, to avoid a laggy experience for users. Also there need to be
# at least 2 consecutive images without a QR code to allow scanning the same
# QR code afresh.
#
# This setting is measured in seconds.
image_pause_period = 0.4


# How long to pause after image grabbing errors
#
# This setting allows to give the pipeline time to recover.
#
# This setting is measured in seconds.
image_error_pause_period = 2


# Where to store state across restarts
#
# If not empty, it's taken as file name for the internal state. It's stored
# before shutdown and read at startup. This file allows to avoid considering
# a picture as new that is in front of the camera during restart.
# If empty, persisting and loading state is skipped.
state_file =



[service:demo-server]


# TCP port the demo server will listen on.
port = 8080


# The kind of requests to log
#
# Either `all` to log all requests, `non-200` to log all requests that have a
# response status different to 200, `non-2xx` to log all requests that are
# outside of the `success` range, or `none` to log no requests at all.
log_requests = all


# The value for the `Server` response header.
#
# If empty, Python's default `Server` response header is sent
server_version_override =


# The number of threads to use for serving requests
thread_pool_size = 2



#-------------------------------------------------------------------------------
# Below this line, it's standard Python logging configuration.
# By default, we log only INFO and above and we log to console.
# See https://docs.python.org/3/library/logging.config.html#logging-config-fileformat
# on how to override logging settings.

[loggers]
keys = root

[handlers]
keys = default

[formatters]
keys = default

[logger_root]
level = INFO
handlers = default
propagate = 1

[handler_default]
class=StreamHandler
formatter=default
args=(sys.stdout,)

[formatter_default]
format = %(asctime)s.%(msecs)03d %(levelname)-5s [%(threadName)s] %(filename)s:%(lineno)d - %(message)s
datefmt = %Y-%m-%dT%H:%M:%S
